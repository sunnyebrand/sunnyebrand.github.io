<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Silence!]]></title>
    <link href="/blog/tags/silence.xml" rel="self"/>
    <link href="/"/>
    <updated>2015-08-14T12:01:56+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Happy Birthday Silence!]]></title>
            <link href="/blog/2015/08/14/happy-birthday-silence"/>
            <updated>2015-08-14T00:00:00+00:00</updated>
            <id>/blog/2015/08/14/happy-birthday-silence</id>
            <content type="html"><![CDATA[<p>This is the first post to the Silence blog.</p>

<p>The pourpose of this blog is to work as a personal journal where I can annotate anything I need to put down in writing with the vague idea it could serve me in the future.</p>

<p>I plan to include also, now and then, some rant on technologies, life as an entrepreneur and life as a housband and father.</p>

<p>And again, maybe I'll also add some code:</p>

<pre><code>\datethis

@* One-dimensional particle physics. This program is a quick-and-dirty
implementation of the random process analyzed by Hermann Rost in 1981
(see exercise 5.1.4--40). Start with infinitely many 1s followed by
infinitely many 0s; then randomly interchange adjacent elements that
are out of order.

@c
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;
#include "gb_flip.h"

char *bit;
int *list;
int seed; /* random number seed */
int n; /* this many interchanges */

main(argc,argv)
  int argc; char *argv[];
{
  register int i,j,k,l,t,u,r;
  @&lt;Scan the command line@&gt;;
  @&lt;Initialize everything@&gt;;
  for (r=0;r&lt;n;r++) @&lt;Move@&gt;;
  @&lt;Print the results@&gt;;
}

@ @&lt;Scan the command line@&gt;=
if (argc!=3 || sscanf(argv[1],"%d",&amp;n)!=1 || sscanf(argv[2],"%d",&amp;seed)!=1) {
  fprintf(stderr,"Usage: %s n seed &gt;! output.ps\n",argv[0]);
  exit(-1);
}
@ We maintain the following invariants: |bit[k]=1| for |k&lt;=l|;
|bit[k]=0| for |k=u|; the indices |i| where |bit[i]&gt;bit[i+1]|
are |list[j]| for $0\le j&lt;t$.

@&lt;Initialize everything@&gt;=
gb_init_rand(seed);
bit=(char*)malloc(2*n+2);
list=(int*)malloc(4*n+4);
for (k=0;k&lt;=n;k++) bit[k]=1;
for (;k&lt;=n+n+1;k++) bit[k]=0;
l=u=n;
list[0]=n;
t=1;

@ @&lt;Move@&gt;=
{
  j=gb_unif_rand(t);
  i=list[j];
  t--;
  list[j]=list[t];
  bit[i]=0;@+bit[i+1]=1;
  if (i==l) l--;
  if (i==u) u++;
  if (bit[i-1]) list[t++]=i-1;
  if (!bit[i+2]) list[t++]=i+1;
}

@ @&lt;Print the results@&gt;=
@&lt;Print the PostScript header info@&gt;;
@&lt;Print the empirical curve@&gt;;
@&lt;Print the theoretical curve@&gt;;
@&lt;Print the PostScript trailer info@&gt;;

@ @&lt;Print the PostScript header info@&gt;=
printf("%%!PS\n");
printf("%%%%BoundingBox: -1 -1 361 361\n");
printf("%%%%Creator: %s %s %s\n",argv[0],argv[1],argv[2]);
printf("/d {0 s neg rlineto} bind def\n"); /* move down */
printf("/r {s 0 rlineto} bind def\n"); /* move right */

@ @&lt;Print the PostScript trailer info@&gt;=
printf("showpage\n");

@ The empirical curve is scaled so that $\sqrt{6n}$ units is 5 inches.

@&lt;Print the empirical curve@&gt;=
printf("/s %g def\n",360.0/sqrt(6.0*n));
printf("newpath %d %d s mul moveto\n",0,n-l);
for (k=l+1;k&lt;=u;k++) {
  if (bit[k]) printf(" d");@+else printf(" r");
  if ((k-l)%40==0) printf("\n");
}
printf("\n0 0 lineto closepath\n");
printf("1 setlinewidth stroke\n");

@ The theoretical curve $\sqrt{\mathstrut x}+\sqrt{\mathstrut y}=1$ is
scaled so that 1 unit is 5 inches. We use the fact that this curve
is {\it exactly\/} drawn by PostScript Bezier curve routines,
from the control points $(0,1)$, $(0,1/3)$, $(1/3,0)$, $(1,0)$.

@&lt;Print the theoretical curve@&gt;=
printf("newpath 0 360 moveto 0 120 120 0 360 0 curveto\n");
printf(" 0 0 lineto closepath\n");
printf(".3 setlinewidth stroke\n");

@* Index.
</code></pre>

<p>Have a nice trip <a href="http://stefanosomenzi.com">Silence</a>!</p>

<p>I'm a big fan of <a href="http://daringfireball.net/projects/markdown/">Markdown</a>. And this is why I use <a href="https://sculpin.io/">Sculpin</a></p>
]]></content>
        </entry>
    </feed>